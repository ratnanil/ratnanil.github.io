---
title: "Eigenheim Rechner"
subtitle: "Wie viel Eigenkapital brauche ich?"
execute: 
  echo: false
---

Wenn man in der Schweiz ein Eigentum erwerben möchte, müssen zwei Voraussetzungen erfüllt sein: Einerseits muss der **Deckungsgrad** gegeben sein: Die Höhe der Hypothek darf maximal 20% des Kaufpreises betragen. <!-- Die restlichen 20% müssen in Form von Eigenkapital verfügbar sein: Die hälfte davon, also 10%, müssen in Form von Barvermögen vorhanden sein, die fehldnen 10% können von der Peensionskasse hizugezogen werden. -->
Zudem darf die **Tragbarkeit** nicht überschrittn werden: Die Laufkosten der Immobilie dürfen nicht höher als etwa[^1] 33% des Einkommens betragen.

Beide Voraussetzungen können als Funktionen gesehen werden, welche in Abhängigkeit vom Jahreseinkommen, dem verfübaren Pensionskassenguthaben und vor allem dem Kaufpreis das minimal benötigte Eigenkapital beschreibt. Da beide Bedigungen erfüllt sein müssen gilt dann jeweils der höhere der beiden Werte. 

Mit der nachstehenden Applikation kann dieser Wert **mit den eignen Voraussetzungen** ermittelt werden. Geben Sie ihr Jahreseinkommen sowie das verfügbare Pensionskassenguthaben ein um zu ermitteln, wie viel Eigenkapitel Sie bei welchem Kaufpreis benötigen. 



[^1]: Diese Grenze ist nicht ganz fix und wird im Einzelfall geprüft.

```{ojs}
import {vl} from "@vega/vega-lite-api-v5"
```

<style>
 .vega-bind label{
            display: grid;
            grid-template-columns: repeat(2, 1fr);
        }

.vega-bind{
            background-color: #073b4c;
            padding-left: 10px;
            padding-right: 10px;

        }

input{
    background-color: grey;
}
</style>

```{ojs}

vl.render({ spec: spec })
    .then((chart) => {
    setTimeout(() => window.dispatchEvent(new Event("resize")), 1);
    return chart;
  })
```


```{ojs}


spec = ({
    "$schema": "https://vega.github.io/schema/vega-lite/v5.json",
    "description": "Plots a function using a generated sequence.",
    "width": "container",
    "height": 300,
    "data": {
        "sequence": { "start": 1, "stop": 100, "step": 1, "as": "index" }
    },
    "transform": [
        {
            "calculate": "datum.index*maxprice/100",
            "as": "price"
        },
        {
            "calculate": "if(pk/datum.price>=0.1, datum.price*0.1,(0.2-(pk/datum.price))*datum.price)",
            "as": "condition1"
        },
        {
            "calculate": "datum.price-pk-(ratio/100*income-0.01*datum.price)/0.06",
            "as": "condition_temp"
        },
        {
            "calculate": "if(datum.condition_temp>0, datum.condition_temp, null)",
            "as": "condition2"
        },
        {
            "calculate": "ceil(max(datum.condition1, datum.condition2)/1000)*1000",
            "as": "condition_both"
        },
    ],
    "params": [
        { "name": "maxprice", "value": 1000000, "bind": { "input": "number", "name": "Maximaler Kaufpreis", "step": 100000 } },
        { "name": "pk", "value": 50000, "bind": { "input": "number", "name": "Pensionskassenguthaben", "step": 5000 } },
        { "name": "income", "value": 100000, "bind": { "input": "number", "name": "Jahreseinkommen", "step": 5000 } },
        { "name": "ratio", "value": 33, "bind": { "input": "range", "name": "Tragbarkeit (in %)", "min": 30, "max": 40, "step": 1 } },
    ],
    "layer": [

        {
            "mark": {
                "type": "point",
                "fill": "red",
                "stroke": false,
                "tooltip": true
            },
            "encoding": {
                "x": {
                    "field": "price", 
                    "type": "quantitative",
                    "title": "Kaufpreis (CHF)",

                    },
                "y": {
                    "field": 
                    "condition_both", 
                    "type": "quantitative", 
                    "title": "Benötigtes Eigenkapital (CHF)",
                    },
                "opacity": {
                    "condition": { "value": 1, "param": "hover", "empty": false },
                    "value": 0
                },
                "tooltip": [
                    { "field": "price", "type": "quantitative", "title": "Price" },
                    { "field": "condition_both", "type": "quantitative", "title": "Cash", },

                ]
            },
            "params": [{
                "name": "hover",
                "select": {
                    "type": "point",
                    "nearest": true,
                    "on": "mouseover",
                    "clear": "mouseout",
                    "encodings": ["x"]
                }
            }]


        },
        {
            "mark": { "type": "rule", "color": "#fafbfb"},
            "encoding": {
                "x": { "field": "price", "type": "quantitative" },
                "opacity": {
                    "value": 0,
                    "condition": { "value": 0.3, "param": "hover", "empty": false }

                },

            },

        },
        {
            "mark": { "type": "rule", "color": "#fafbfb"},
            "encoding": {
                "y": { "field": "condition_both", "type": "quantitative" },
                "opacity": {
                    "value": 0,
                    "condition": { "value": 0.3, "param": "hover", "empty": false }

                },

            },

        },
        {
            "transform": [
                { "fold": ["condition1", "condition2"] },
                { "calculate": "{'condition1': 'Deckungsgrad', 'condition2': 'Tragbarkeit'}[datum.key]", "as": "key" }
            ],
            "mark": { "type": "line", "color": "orange" },
            "encoding": {
                "x": { "field": "price", "type": "quantitative" },
                "y": { "field": "value", "type": "quantitative" },
                "color": { "field": "key", "type": "nominal" }
            },


        },

    ],
    "config": {
        "view": {
            "strokeOpacity": 0
        },
        "axis": {
            "grid": false,
            "titleColor": "#fafbfb",
            "domainColor": "#fafbfb",
            "labelColor": "#fafbfb",
            "tickColor": "#fafbfb"
            },
        "legend": {
            "title": null,
            "orient": "top", 
            },
    },
    "background": "#073b4c"
});
```

## Condition 1: Equity ratio (*Belehnungsgrad*)

As mentioned, the bank will provide you with maximum 80% of the money needed to buy the residential property. The remaining 20% must be available as "equity capital", of which at least 10% must be cash assets. The remaining 10% may be drawn from the pension fund (*Pensionskasse*). Cash assets is money can be money on a bank deposit, in a 3rd pillar (*3a Säule*) or a gift / inheritance. 




## Condition 2: Affordability (*Tragbarkeit*)

While condition 1 limits the height of your mortgabe based on the price of the property, condition 2 is limiting based on your yearly income. This condition states that the running costs of your house should not exceed 33% of your gross income (which I will call $\gamma$). The running costs are based on the height of your mortgage (which I will call $\alpha$) and the price of your property (which I will call $\beta$):

1. The imputed interest (*Kalkulatorischer Zins*): This is not the *actual* interest on your mortgage (since this might change in the future) but a fixed interest of 5%. Formally:  $\alpha \times 5\%$.
2. Amortisation costs (*Amortisationskosten*): Traditionally, you are required to pay back your "second mortgage" (normally 15% of your full morgage) within 15 years. Formally: $\alpha \times 1\%$
3. Ancillary costs (*Nebenkosten*): These are calculated to be 1% of your house price (not your morgage). Formally: $\beta \times 1\%$

Putting it all together, condition 2 can be formulated as $\gamma \times 33\% \leq \alpha \times 5\% + \alpha \times 1\% + \beta \times 1\%$. Since I'm mostly intered in the minimal cash assets needed, I need to solve this function for $\alpha$, the mortgage:

\begin{align}
0.33\gamma &= 0.05\alpha + 0.01\alpha + 0.01\beta \\
0.33\gamma - 0.01\beta &= 0.06\alpha \\
\alpha &= \frac{0.33\gamma - 0.01\beta}{0.06} \\
\end{align}

We can further simplify $\alpha$, the mortgage, as being the price ($\beta$), minus pensionskasse ($\delta$) minus hard cash ($\epsilon$)

\begin{align}
\alpha &= \frac{0.33\gamma - 0.01\beta}{0.06} \\
\beta - \delta - \epsilon &= \frac{0.33\gamma - 0.01\beta}{0.06} \\
\epsilon &= \beta - \delta  - \frac{0.33\gamma - 0.01\beta}{0.06} \\

\end{align}


Now that we have solved it for the $\epsilon$, we can translate the formula into a python function:




<!--

I started implementint the above spec into the vega lite api. I'm keeping it here for future reference.


```{ojs}

viewof pk = Inputs.number([0, Infinity], {step: 5000, label: "Pension Fund", placeholder: "00000", value: 50000})
viewof lohn = Inputs.number([10000, Infinity], {step: 10000, label: "Lohn", placeholder: "000000", value: 100000})


// const myparams = vl.slider.input("range")
// const pk = 50000
// const income = 150000
// const ratio = 0.20

//viewof income = Range([20000, 200000], { step: 10000, value: 100000 })

vl.markLine().data(vl.sequence(100000, 1000000, 50000).as("price"))
    .width(700)
    . params(
        vl.param("ratio").value(0.33).bind(vl.slider(0.30, 0.40, 0.01)),
        vl.param("pk").bind(viewof pk),
        vl.param("lohn").bind(viewof lohn)
        )
    .transform(
        vl.calculate("if(pk/datum.price>=0.1, datum.price*0.1,(0.2-(pk/datum.price))*datum.price)").as("condition1"),
        vl.calculate("datum.price-pk-(ratio*lohn-0.01*datum.price)/0.06").as("condition_temp"),
        vl.calculate("if(datum.condition_temp>0, datum.condition_temp, 0)").as("condition2"),
        vl.calculate("max(datum.condition1, datum.condition2)").as("condition_both")
    )
    .encode(
        vl.x().fieldQ("price"),
        vl.y().fieldQ("condition1")
        )

    .render()


```

-->